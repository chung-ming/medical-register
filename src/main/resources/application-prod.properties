# Spring Application Name (can be inherited from application.properties if not overridden)
# spring.application.name=medical-register

# Server Port (can be inherited or overridden, e.g., if prod runs on a different port)
# server.port=8080

# ==========================================
# LOGGING - Reduce verbosity for production
# ==========================================
# Default logging level for all packages
logging.level.root=INFO
logging.level.org.springframework.security=INFO
logging.level.org.springframework.web=INFO

# Hibernate can be very chatty at INFO
logging.level.org.hibernate=WARN

# Your application's base package
logging.level.com.example.medicalregister=INFO

# ==========================================
# DATABASE - Production Configuration
# ==========================================
# IMPORTANT: For a real production environment, you would typically use a persistent database
# like PostgreSQL, MySQL, etc., and configure its connection details here.
# The H2 in-memory database is generally not suitable for production data.
# Example for PostgreSQL (replace with your actual production DB details):
# spring.datasource.driverClassName=org.postgresql.Driver
# spring.datasource.url=jdbc:postgresql://your-prod-db-host:5432/medicaldb_prod
# spring.datasource.username=prod_user
# spring.datasource.password=${DB_PASSWORD} # Use environment variables for passwords!

# For now, if still using H2 for some reason (e.g., a very specific, non-critical use case or demo):
spring.datasource.driverClassName=org.h2.Driver

# Persist H2 to a file for production (relative to application startup directory).
spring.datasource.url=jdbc:h2:file:./prod_medicaldb

spring.datasource.username=sa

# Externalize this password
spring.datasource.password=${H2_DB_PASSWORD:default_prod_password}

# Disable H2 console in production - SECURITY RISK
spring.h2.console.enabled=false

# JPA/Hibernate DDL strategy for production
# 'validate': Hibernate validates the schema, making sure the tables and columns match the entities.
# 'none': Hibernate does nothing with the schema. Use this if you manage schema with tools like Flyway or Liquibase.
# AVOID 'create', 'create-drop', or 'update' in production as they can lead to data loss.
spring.jpa.hibernate.ddl-auto=update

# ==========================================
# WEB & UI
# ==========================================
# Thymeleaf Configuration (primary view technology for this application)
spring.thymeleaf.mode=XHTML
spring.thymeleaf.suffix=.xhtml
spring.thymeleaf.encoding=UTF-8

# Enable cache for production for better performance
spring.thymeleaf.cache=true

# ==========================================
# AUTH0 - OAUTH2 CLIENT
# ==========================================
# These can often be inherited from application.properties if they don't change per environment.
# If they do (e.g., different Auth0 applications for dev/prod), override them here.

# Externalize
spring.security.oauth2.client.registration.auth0.client-id=${AUTH0_CLIENT_ID}

# spring.security.oauth2.client.registration.auth0.client-name=Auth0 # Usually same
# spring.security.oauth2.client.registration.auth0.scope=openid,profile,email # Usually same
# spring.security.oauth2.client.registration.auth0.provider=auth0 # Usually same
# spring.security.oauth2.client.registration.auth0.redirect-uri={baseUrl}/login/oauth2/code/{registrationId} # Usually same
# spring.security.oauth2.client.registration.auth0.authorization-grant-type=authorization_code # Usually same

# Externalize
spring.security.oauth2.client.provider.auth0.issuer-uri=${AUTH0_ISSUER_URI}

# !!! CRITICAL SECURITY WARNING !!!
# DO NOT hardcode secrets like client-secret in ANY properties file committed to version control.
# The client-secret should be provided via environment variables or a secure secrets management system.
spring.security.oauth2.client.registration.auth0.client-secret=${AUTH0_CLIENT_SECRET}

# ==========================================
# OTHER PRODUCTION SETTINGS
# ==========================================
# Add any other production-specific properties here.
# For example, if you have different API keys for external services in prod vs dev.
