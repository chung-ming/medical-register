spring.application.name=medical-register

# Server Port
server.port=8080

logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG

# H2 Database Configuration
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.password=password
spring.datasource.url=jdbc:h2:file:./dev_medicaldb
spring.datasource.username=sa
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# spring.jpa.hibernate.ddl-auto: Defines schema generation strategy.
# 'update': Hibernate attempts to update the schema to match entities. Good for development to see schema changes.
# 'create-drop': Drops and recreates schema on startup/shutdown. Useful for a clean slate in dev/testing.
# 'validate': Validates schema, no changes. Recommended for production.
# 'none': No schema action.
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# Thymeleaf Configuration for XHTML
spring.thymeleaf.mode=XHTML
spring.thymeleaf.suffix=.xhtml
spring.thymeleaf.encoding=UTF-8

# Disable cache for development
spring.thymeleaf.cache=false

# Auth0 Configuration
# These will be overridden by application-local.properties if present,
# otherwise, they expect environment variables or use the provided defaults.
spring.security.oauth2.client.registration.auth0.client-id=${AUTH0_CLIENT_ID:dummy-client-id}
spring.security.oauth2.client.registration.auth0.client-secret=${AUTH0_CLIENT_SECRET:dummy-client-secret}
spring.security.oauth2.client.registration.auth0.scope=openid,profile,email
spring.security.oauth2.client.registration.auth0.client-name=Auth0
spring.security.oauth2.client.registration.auth0.provider=auth0
# Default redirect URI pattern
spring.security.oauth2.client.registration.auth0.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.auth0.authorization-grant-type=authorization_code

spring.security.oauth2.client.provider.auth0.issuer-uri=${AUTH0_ISSUER_URI:https://dev-z1arx3mmb04n4k4f.us.auth0.com/}
# Note: For Spring Boot 3, token introspection or JWK set URI might be needed for resource server part if API calls are made from external client
# For server-side rendered app secured with OAuth2 Client, the issuer-uri is primary for the client part.

# If you expose REST APIs and want to validate JWTs from external clients (e.g. a SPA or mobile app)
# you'd also configure the resource server part:
# spring.security.oauth2.resourceserver.jwt.issuer-uri=https://YOUR_AUTH0_DOMAIN/
# spring.security.oauth2.resourceserver.jwt.audiences=YOUR_AUTH0_API_AUDIENCE # Usually your API identifier in Auth0

# Expose the health endpoint. This will make /actuator/health,
# /actuator/health/readiness, and /actuator/health/liveness available.
management.endpoints.web.exposure.include=health

# Optional: To see more details in the /actuator/health response (helpful for debugging)
management.endpoint.health.show-details=always

# These are usually enabled by default if Actuator is present,
# but you can explicitly ensure they are:
management.health.readinessstate.enabled=true
management.health.livenessstate.enabled=true
