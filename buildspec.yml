version: 0.2

phases:
  install:
    runtime-versions:
      java: corretto17 # Explicitly set Java 17, matching your pom.xml
    commands:
      - echo Entered the install phase...
      # Add any other pre-requisite installations here if needed
  pre_build:
    commands:
      - echo Logging in to Docker Hub...
      # Retrieve Docker Hub credentials from AWS Secrets Manager
      # Replace the secret-id with the ARN or name of your Docker Hub credentials secret
      # Ensure your CodeBuild service role has 'secretsmanager:GetSecretValue' permission for this secret
      - DOCKERHUB_CREDENTIALS=$(aws secretsmanager get-secret-value --secret-id "arn:aws:secretsmanager:us-east-1:851725251295:secret:dockerhub/medical-register/credentials-Mra96G" --query SecretString --output text --region us-east-1)
      - DOCKERHUB_USERNAME=$(echo $DOCKERHUB_CREDENTIALS | jq -r .username)
      - DOCKERHUB_PASSWORD=$(echo $DOCKERHUB_CREDENTIALS | jq -r .password)
      - echo "$DOCKERHUB_PASSWORD" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
      - echo Logging in to Amazon ECR...
      # Replace YOUR_AWS_ACCOUNT_ID and $AWS_REGION with your actual AWS Account ID and region
      # The CodeBuild environment variables $AWS_DEFAULT_REGION or $AWS_REGION can often be used for region.
      # Ensure the CodeBuild role has ECR permissions.
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 851725251295.dkr.ecr.us-east-1.amazonaws.com
      - REPOSITORY_URI=851725251295.dkr.ecr.us-east-1.amazonaws.com/medical-register
      # Use the commit hash for a unique image tag, and also tag as latest
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:-latest} # Fallback to latest if commit hash is not available

      # SonarQube Setup - Uncomment and configure if you are using SonarQube
      # Ensure your SonarQube server is accessible from CodeBuild (not localhost)
      # - export SONAR_HOST_URL="YOUR_ACCESSIBLE_SONARQUBE_URL" # e.g., http://sonar.example.com:9000
      # - export SONAR_TOKEN=$(aws secretsmanager get-secret-value --secret-id "arn:aws:secretsmanager:us-east-1:851725251295:secret:sonarqube/medical-register/token-JHP75e" --query SecretString --output text --region us-east-1)

  build:
    commands:
      - echo Entered the build phase...
      - echo Building the Spring Boot application, running tests, and generating coverage with pom.xml...
      # The 'verify' phase runs tests and JaCoCo.
      # Add sonar:sonar if SonarQube is configured and accessible. Ensure sonar.host.url is correct.
      # If using SonarQube, uncomment the sonar:sonar part and ensure SONAR_HOST_URL and SONAR_TOKEN are set
      # - mvn clean verify sonar:sonar -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN
      - mvn clean verify

      - echo Building the Docker image using Dockerfile...
      # Build the image
      - docker build -t $REPOSITORY_URI:$IMAGE_TAG .
      # Also tag as 'latest' if IMAGE_TAG is not 'latest' (i.e., it's a commit hash)
      - if [ "$IMAGE_TAG" != "latest" ]; then docker tag $REPOSITORY_URI:$IMAGE_TAG $REPOSITORY_URI:latest; fi
      - echo "--- Docker images after build and tag ---"
      - docker images

  post_build:
    commands:
      - echo Entered the post_build phase...
      - echo Build completed on `date`
      - echo Pushing Docker images to ECR...
      - docker push $REPOSITORY_URI:latest
      - if [ "$IMAGE_TAG" != "latest" ]; then docker push $REPOSITORY_URI:$IMAGE_TAG; fi # Push specific tag if not latest
      - echo Writing image definitions file...
      # IMPORTANT: Replace 'medical-register-container' with the actual 'name' of the container
      # as defined in your ECS Task Definition.
      - printf '[{"name":"medical-register-container","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
artifacts:
  files:
    - target/medical-register-*.jar # This is the JAR built by pom.xml
    - imagedefinitions.json # This file is crucial for ECS deployment
  discard-paths: yes
