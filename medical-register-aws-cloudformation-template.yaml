---
Metadata:
  AWSToolsMetrics:
    IaC_Generator: "arn:aws:cloudformation:us-east-1:851725251295:generatedTemplate/820af9b6-55bd-492a-a83e-c96a3236fe7b"
Resources:
  EC2RouteFp:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::Route"
    DeletionPolicy: "Retain"
    Properties:
      RouteTableId:
        Ref: "EC2RouteTableBK"
      DestinationCidrBlock:
        Fn::GetAtt:
        - "EC2VPC"
        - "CidrBlock"
      GatewayId: "local"
      VpcEndpointId: "local"
  IAMRoleAWSServiceRoleForElasticLoadBalancing:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::IAM::Role"
    DeletionPolicy: "Retain"
    Properties:
      Path: "/aws-service-role/elasticloadbalancing.amazonaws.com/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/aws-service-role/AWSElasticLoadBalancingServiceRolePolicy"
      MaxSessionDuration: 3600
      RoleName: "AWSServiceRoleForElasticLoadBalancing"
      Description: "Allows ELB to call AWS services on your behalf."
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "elasticloadbalancing.amazonaws.com"
  EC2RouteOV:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::Route"
    DeletionPolicy: "Retain"
    Properties:
      RouteTableId:
        Ref: "EC2RouteTableBK"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: "EC2InternetGateway"
      VpcEndpointId: "igw-0bb9a09f91863ce2c"
  IAMRoleEcsTaskExecutionRole:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::IAM::Role"
    DeletionPolicy: "Retain"
    Properties:
      Path: "/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      MaxSessionDuration: 3600
      RoleName: "ecsTaskExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2008-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "ecs-tasks.amazonaws.com"
          Sid: ""
  IAMManagedPolicyPolicyRegionRestrict:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::IAM::ManagedPolicy"
    DeletionPolicy: "Retain"
    Properties:
      ManagedPolicyName: "RegionRestrict"
      Path: "/"
      Description: ""
      Groups:
      - "CostTest_UserGroup"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Condition:
            StringEquals:
              aws:RequestedRegion: "us-east-1"
          Resource: "*"
          Action: "s3:*"
          Effect: "Allow"
          Sid: "VisualEditor0"
      Roles: []
      Users: []
  EC2RouteSU:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::Route"
    DeletionPolicy: "Retain"
    Properties:
      RouteTableId:
        Ref: "EC2RouteTableNc"
      DestinationCidrBlock:
        Fn::GetAtt:
        - "EC2VPC"
        - "CidrBlock"
      GatewayId: "local"
      VpcEndpointId: "local"
  EC2NetworkInterfaceAttachmentQy:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::NetworkInterfaceAttachment"
    DeletionPolicy: "Retain"
    Properties:
      NetworkInterfaceId: "eni-027f93c72d460d1f7"
      DeviceIndex: "1"
      DeleteOnTermination: false
  EC2RouteRr:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::Route"
    DeletionPolicy: "Retain"
    Properties:
      NatGatewayId:
        Ref: "EC2NatGatewayVU"
      RouteTableId:
        Ref: "EC2RouteTableNc"
      DestinationCidrBlock: "0.0.0.0/0"
  EC2SubnetNetworkAclAssociation:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    DeletionPolicy: "Retain"
    Properties:
      NetworkAclId:
        Ref: "EC2NetworkAcl"
      SubnetId:
        Ref: "EC2SubnetHj"
  EC2RouteWT:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::Route"
    DeletionPolicy: "Retain"
    Properties:
      RouteTableId:
        Ref: "EC2RouteTableSY"
      DestinationCidrBlock:
        Fn::GetAtt:
        - "EC2VPC"
        - "CidrBlock"
      GatewayId: "local"
      VpcEndpointId: "local"
  ECSTaskDefinitionTaskdefinitionmedicalregisterapp9:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::ECS::TaskDefinition"
    DeletionPolicy: "Retain"
    Properties:
      ExecutionRoleArn:
        Fn::GetAtt:
        - "IAMRoleEcsTaskExecutionRole"
        - "Arn"
      RuntimePlatform:
        OperatingSystemFamily: "LINUX"
        CpuArchitecture: "X86_64"
      Volumes: []
      InferenceAccelerators: []
      Memory: "1024"
      PlacementConstraints: []
      ContainerDefinitions:
      - Secrets: []
        HealthCheck:
          Command:
          - "CMD-SHELL"
          - "curl -f http://localhost:8080/actuator/health || exit 1"
          Timeout: 5
          Retries: 3
          Interval: 30
          StartPeriod: 60
        VolumesFrom: []
        Cpu: 0
        EntryPoint: []
        DnsServers: []
        Image: "851725251295.dkr.ecr.us-east-1.amazonaws.com/medical-register:e8488ea"
        Essential: true
        LogConfiguration:
          SecretOptions: []
          Options:
            awslogs-group: "/ecs/medical-register-app"
            mode: "non-blocking"
            max-buffer-size: "25m"
            awslogs-create-group: "true"
            awslogs-region: "us-east-1"
            awslogs-stream-prefix: "ecs"
          LogDriver: "awslogs"
        ResourceRequirements: []
        EnvironmentFiles: []
        Name: "medical-register-container"
        DockerSecurityOptions: []
        SystemControls: []
        DnsSearchDomains: []
        CredentialSpecs: []
        Ulimits: []
        ExtraHosts: []
        MountPoints: []
        DependsOn: []
        DockerLabels: {}
        PortMappings:
        - ContainerPort: 8080
          AppProtocol: "http"
          Protocol: "tcp"
          HostPort: 8080
          Name: "medical-register-http8080"
        Command: []
        Environment:
        - Value: "HT5TFnmaRbens0MEMRfkvGqPUrSU9ZLB"
          Name: "AUTH0_CLIENT_ID"
        - Value: "prod"
          Name: "SPRING_PROFILES_ACTIVE"
        - Value: "https://dev-z1arx3mmb04n4k4f.us.auth0.com/"
          Name: "AUTH0_ISSUER_URI"
        - Value: "https://d3n8lb5zdun1i7.cloudfront.net"
          Name: "APP_BASE_URL"
        - Value: "SWoPOTRrvfeShx_jA64ebIGTqkGPYx75wDWyfqqhj8U2lffPsYxnDFoDsTRc3EpL"
          Name: "AUTH0_CLIENT_SECRET"
        Links: []
      Cpu: "512"
      RequiresCompatibilities:
      - "FARGATE"
      Family: "medical-register-app"
      NetworkMode: "awsvpc"
      Tags:
      - Value: "medical-register"
        Key: "project"
      - Value: "prod"
        Key: "environment"
  EC2SubnetNetworkAclAssociationTI:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    DeletionPolicy: "Retain"
    Properties:
      NetworkAclId:
        Ref: "EC2NetworkAcl"
      SubnetId:
        Ref: "EC2SubnetXn"
  EC2NatGateway:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::NatGateway"
    DeletionPolicy: "Retain"
    Properties:
      PrivateIpAddress: "10.0.0.186"
      ConnectivityType: "public"
      VpcId: "vpc-0e6b27f3af141f0e1"
      EniId: "eni-012dfa2e0f6ca17a5"
      AllocationId:
        Fn::GetAtt:
        - "EC2EIP526121149"
        - "AllocationId"
      SubnetId:
        Ref: "EC2SubnetXn"
      Tags:
      - Value: "nat-public1-us-east-1a"
        Key: "Name"
  EC2SubnetNetworkAclAssociationKf:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    DeletionPolicy: "Retain"
    Properties:
      NetworkAclId:
        Ref: "EC2NetworkAcl"
      SubnetId:
        Ref: "EC2Subnet"
  LogsLogGroupawscodepipelineMedicalRegisterPipeline:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::Logs::LogGroup"
    DeletionPolicy: "Retain"
    Properties:
      FieldIndexPolicies: []
      LogGroupClass: "STANDARD"
      LogGroupName: "/aws/codepipeline/MedicalRegisterPipeline"
      DataProtectionPolicy: {}
  EC2EIP526121149:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::EIP"
    DeletionPolicy: "Retain"
    Properties:
      PublicIpv4Pool: "amazon"
      Domain: "vpc"
      Tags:
      - Value: "eip-us-east-1a"
        Key: "Name"
      NetworkBorderGroup: "us-east-1"
  EC2NetworkInterfaceAttachmentAw:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::NetworkInterfaceAttachment"
    DeletionPolicy: "Retain"
    Properties:
      NetworkInterfaceId: "eni-0350a978f35436dc4"
      DeviceIndex: "1"
      DeleteOnTermination: false
  EC2EIPAssociation:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::EIPAssociation"
    DeletionPolicy: "Retain"
    Properties:
      PrivateIpAddress:
        Fn::GetAtt:
        - "EC2NetworkInterfaceDf"
        - "PrimaryPrivateIpAddress"
      NetworkInterfaceId:
        Ref: "EC2NetworkInterfaceDf"
      EIP:
        Fn::GetAtt:
        - "EC2EIP1002980173"
        - "PublicIp"
      AllocationId:
        Fn::GetAtt:
        - "EC2EIP1002980173"
        - "AllocationId"
  IAMManagedPolicyPolicyserviceroleCodePipelineCodeBuilduseast1medicalregisterpipeline:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::IAM::ManagedPolicy"
    DeletionPolicy: "Retain"
    Properties:
      ManagedPolicyName: "CodePipeline-CodeBuild-us-east-1-medical-register-pipeline"
      Path: "/service-role/"
      Description: "Policy used in trust relationship with CodePipeline for CodeBuild\
        \ Action"
      Groups: []
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource:
          - "arn:aws:codebuild:*:851725251295:project/medical-register-build"
          Action:
          - "codebuild:BatchGetBuilds"
          - "codebuild:StartBuild"
          - "codebuild:BatchGetBuildBatches"
          - "codebuild:StartBuildBatch"
          Effect: "Allow"
      Roles:
      - Ref: "IAMRoleAWSCodePipelineServiceRoleuseast1medicalregisterpipeline"
      Users: []
  S3BucketPolicyCodepipelineuseast1568b3f797127455bb7342308f722c53e:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::S3::BucketPolicy"
    DeletionPolicy: "Retain"
    Properties:
      Bucket:
        Ref: "S3BucketCodepipelineuseast1568b3f797127455bb7342308f722c53e"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Condition:
            StringNotEquals:
              s3:x-amz-server-side-encryption: "aws:kms"
          Resource: "arn:aws:s3:::codepipeline-us-east-1-568b3f797127-455b-b734-2308f722c53e/*"
          Action: "s3:PutObject"
          Effect: "Deny"
          Principal: "*"
          Sid: "DenyUnEncryptedObjectUploads"
        - Condition:
            Bool:
              aws:SecureTransport: "false"
          Resource: "arn:aws:s3:::codepipeline-us-east-1-568b3f797127-455b-b734-2308f722c53e/*"
          Action: "s3:*"
          Effect: "Deny"
          Principal: "*"
          Sid: "DenyInsecureConnections"
        Id: "SSEAndSSLPolicy"
  IAMManagedPolicyPolicyserviceroleCodePipelineCodeConnectionsuseast1medicalregisterpipeline:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::IAM::ManagedPolicy"
    DeletionPolicy: "Retain"
    Properties:
      ManagedPolicyName: "CodePipeline-CodeConnections-us-east-1-medical-register-pipeline"
      Path: "/service-role/"
      Description: "Policy used in trust relationship with CodePipeline for CodeConnections\
        \ Action"
      Groups: []
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource:
          - "arn:aws:codestar-connections:*:851725251295:connection/d52395b9-b227-4116-a016-fac6cbb45f7f"
          - "arn:aws:codeconnections:*:851725251295:connection/d52395b9-b227-4116-a016-fac6cbb45f7f"
          Action:
          - "codeconnections:UseConnection"
          - "codestar-connections:UseConnection"
          Effect: "Allow"
      Roles:
      - Ref: "IAMRoleAWSCodePipelineServiceRoleuseast1medicalregisterpipeline"
      Users: []
  EC2DHCPOptions:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::DHCPOptions"
    DeletionPolicy: "Retain"
    Properties:
      DomainName: "ec2.internal"
      DomainNameServers:
      - "AmazonProvidedDNS"
      Tags: []
  EC2Route:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::Route"
    DeletionPolicy: "Retain"
    Properties:
      RouteTableId:
        Ref: "EC2RouteTable"
      DestinationCidrBlock:
        Fn::GetAtt:
        - "EC2VPC"
        - "CidrBlock"
      GatewayId: "local"
      VpcEndpointId: "local"
  IAMRoleCodebuildmedicalregisterbuildservicerole:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::IAM::Role"
    DeletionPolicy: "Retain"
    Properties:
      Path: "/service-role/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser"
      - "arn:aws:iam::851725251295:policy/service-role/CodeBuildBasePolicy-medical-register-build-us-east-1"
      MaxSessionDuration: 3600
      RoleName: "codebuild-medical-register-build-service-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "codebuild.amazonaws.com"
  EC2RouteNN:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::Route"
    DeletionPolicy: "Retain"
    Properties:
      RouteTableId:
        Ref: "EC2RouteTableSY"
      DestinationPrefixListId: "pl-63a5400a"
      GatewayId: "vpce-04de2e936c5bfd7ed"
      VpcEndpointId: "vpce-04de2e936c5bfd7ed"
  SecretsManagerSecret:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::SecretsManager::Secret"
    DeletionPolicy: "Retain"
    Properties:
      ReplicaRegions: []
      Tags: []
      Name: "dockerhub/medical-register/credentials"
  CloudFrontCachePolicy:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::CloudFront::CachePolicy"
    DeletionPolicy: "Retain"
    Properties:
      CachePolicyConfig:
        Comment: "Policy for origins that return Cache-Control headers and serve different\
          \ content based on values present in the query string."
        MinTTL: 0
        MaxTTL: 3.1536E7
        ParametersInCacheKeyAndForwardedToOrigin:
          QueryStringsConfig:
            QueryStringBehavior: "all"
          EnableAcceptEncodingBrotli: true
          HeadersConfig:
            HeaderBehavior: "whitelist"
            Headers:
            - "x-method-override"
            - "origin"
            - "host"
            - "x-http-method"
            - "x-http-method-override"
          CookiesConfig:
            CookieBehavior: "all"
          EnableAcceptEncodingGzip: true
        DefaultTTL: 0
        Name: "UseOriginCacheControlHeaders-QueryStrings"
  ElasticLoadBalancingV2ListenerListenerappmedicalregisteralb8f9ae4e712d84b88443484c2a59ae48f:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    DeletionPolicy: "Retain"
    Properties:
      ListenerAttributes:
      - Value: "true"
        Key: "routing.http.response.server.enabled"
      - Value: ""
        Key: "routing.http.response.access_control_allow_headers.header_value"
      - Value: ""
        Key: "routing.http.response.x_frame_options.header_value"
      - Value: ""
        Key: "routing.http.response.access_control_allow_methods.header_value"
      - Value: ""
        Key: "routing.http.response.access_control_allow_origin.header_value"
      - Value: ""
        Key: "routing.http.response.access_control_allow_credentials.header_value"
      - Value: ""
        Key: "routing.http.response.x_content_type_options.header_value"
      - Value: ""
        Key: "routing.http.response.content_security_policy.header_value"
      - Value: ""
        Key: "routing.http.response.access_control_expose_headers.header_value"
      - Value: ""
        Key: "routing.http.response.strict_transport_security.header_value"
      - Value: ""
        Key: "routing.http.response.access_control_max_age.header_value"
      Protocol: "HTTP"
      LoadBalancerArn:
        Ref: "ElasticLoadBalancingV2LoadBalancerLoadbalancerappmedicalregisteralb8f9ae4e712d84b88"
      DefaultActions:
      - TargetGroupArn:
          Ref: "ElasticLoadBalancingV2TargetGroupTargetgroupmedicalregistertg4202d68f86010af7"
        Type: "forward"
        ForwardConfig:
          TargetGroupStickinessConfig:
            Enabled: false
          TargetGroups:
          - TargetGroupArn:
              Ref: "ElasticLoadBalancingV2TargetGroupTargetgroupmedicalregistertg4202d68f86010af7"
            Weight: 1
      Port: 80
  OrganizationsAccount:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::Organizations::Account"
    DeletionPolicy: "Retain"
    Properties:
      Email: "chungming_tsen@outlook.com"
      ParentIds:
      - "r-2lb6"
      Tags: []
      AccountName: "chungming"
  EC2NetworkInterfaceAttachment:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::NetworkInterfaceAttachment"
    DeletionPolicy: "Retain"
    Properties:
      NetworkInterfaceId: "eni-012dfa2e0f6ca17a5"
      DeviceIndex: "1"
      DeleteOnTermination: false
  EC2VPCDHCPOptionsAssociation:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::VPCDHCPOptionsAssociation"
    DeletionPolicy: "Retain"
    Properties:
      VpcId: "vpc-0e4acffc9870f996b"
      DhcpOptionsId:
        Ref: "EC2DHCPOptions"
  EC2EIPAssociationOU:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::EIPAssociation"
    DeletionPolicy: "Retain"
    Properties:
      PrivateIpAddress:
        Fn::GetAtt:
        - "EC2NetworkInterfaceEW"
        - "PrimaryPrivateIpAddress"
      NetworkInterfaceId:
        Ref: "EC2NetworkInterfaceEW"
      EIP:
        Fn::GetAtt:
        - "EC2EIP526121149"
        - "PublicIp"
      AllocationId:
        Fn::GetAtt:
        - "EC2EIP526121149"
        - "AllocationId"
  EC2NetworkInterface:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::NetworkInterface"
    DeletionPolicy: "Retain"
    Properties:
      Description: "ELB app/medical-register-alb/8f9ae4e712d84b88"
      PrivateIpAddress: "10.0.7.94"
      PrivateIpAddresses:
      - PrivateIpAddress: "10.0.7.94"
        Primary: true
      SecondaryPrivateIpAddressCount: 0
      Ipv6PrefixCount: 0
      Ipv4Prefixes: []
      Ipv4PrefixCount: 0
      GroupSet:
      - "sg-07ca8743185a1af90"
      Ipv6Prefixes: []
      SubnetId:
        Ref: "EC2SubnetXn"
      SourceDestCheck: true
      InterfaceType: "interface"
      Tags: []
      PublicIpDnsNameOptions:
        DnsHostnameType: "public-ipv4-dns-name"
        PublicIpv4DnsName: "ec2-3-92-246-61.compute-1.amazonaws.com"
  EC2EIP1002980173:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::EIP"
    DeletionPolicy: "Retain"
    Properties:
      PublicIpv4Pool: "amazon"
      Domain: "vpc"
      Tags:
      - Value: "eip-us-east-1b"
        Key: "Name"
      NetworkBorderGroup: "us-east-1"
  EC2InternetGateway:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::InternetGateway"
    DeletionPolicy: "Retain"
    Properties:
      Tags:
      - Value: "igw"
        Key: "Name"
  EC2NetworkAcl:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::NetworkAcl"
    DeletionPolicy: "Retain"
    Properties:
      VpcId:
        Ref: "EC2VPC"
      Tags: []
  EC2VPCDHCPOptionsAssociationET:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::VPCDHCPOptionsAssociation"
    DeletionPolicy: "Retain"
    Properties:
      VpcId:
        Ref: "EC2VPC"
      DhcpOptionsId:
        Ref: "EC2DHCPOptions"
  ElasticLoadBalancingV2TargetGroupTargetgroupmedicalregistertg4202d68f86010af7:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    DeletionPolicy: "Retain"
    Properties:
      IpAddressType: "ipv4"
      HealthCheckIntervalSeconds: 30
      Matcher:
        HttpCode: "200"
      HealthCheckPath: "/actuator/health"
      Port: 8080
      Targets:
      - AvailabilityZone: "us-east-1a"
        Port: 8080
        Id: "10.0.130.81"
      - AvailabilityZone: "us-east-1b"
        Port: 8080
        Id: "10.0.22.98"
      HealthCheckEnabled: true
      ProtocolVersion: "HTTP1"
      UnhealthyThresholdCount: 3
      HealthCheckTimeoutSeconds: 5
      Name: "medical-register-tg"
      VpcId:
        Ref: "EC2VPC"
      HealthyThresholdCount: 3
      HealthCheckProtocol: "HTTP"
      TargetGroupAttributes:
      - Value: "JSESSIONID"
        Key: "stickiness.app_cookie.cookie_name"
      - Value: "86400"
        Key: "stickiness.app_cookie.duration_seconds"
      - Value: "true"
        Key: "stickiness.enabled"
      - Value: "1"
        Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
      - Value: "use_load_balancer_configuration"
        Key: "load_balancing.cross_zone.enabled"
      - Value: "app_cookie"
        Key: "stickiness.type"
      - Value: "86400"
        Key: "stickiness.lb_cookie.duration_seconds"
      - Value: "off"
        Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
      - Value: "off"
        Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
      - Value: "0"
        Key: "slow_start.duration_seconds"
      - Value: "300"
        Key: "deregistration_delay.timeout_seconds"
      - Value: "1"
        Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
      - Value: "off"
        Key: "load_balancing.algorithm.anomaly_mitigation"
      - Value: "round_robin"
        Key: "load_balancing.algorithm.type"
      TargetType: "ip"
      HealthCheckPort: "traffic-port"
      Protocol: "HTTP"
      Tags: []
  EC2NetworkInterfaceAttachmentWx:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::NetworkInterfaceAttachment"
    DeletionPolicy: "Retain"
    Properties:
      NetworkInterfaceId: "eni-0023a79a24776b61d"
      DeviceIndex: "1"
      DeleteOnTermination: false
  EC2NetworkInterfaceAf:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::NetworkInterface"
    DeletionPolicy: "Retain"
    Properties:
      Description: "ELB app/medical-register-alb/8f9ae4e712d84b88"
      PrivateIpAddress: "10.0.16.164"
      PrivateIpAddresses:
      - PrivateIpAddress: "10.0.16.164"
        Primary: true
      SecondaryPrivateIpAddressCount: 0
      Ipv6PrefixCount: 0
      Ipv4Prefixes: []
      Ipv4PrefixCount: 0
      GroupSet:
      - "sg-07ca8743185a1af90"
      Ipv6Prefixes: []
      SubnetId:
        Ref: "EC2Subnet"
      SourceDestCheck: true
      InterfaceType: "interface"
      Tags: []
      PublicIpDnsNameOptions:
        DnsHostnameType: "public-ipv4-dns-name"
        PublicIpv4DnsName: "ec2-3-218-236-146.compute-1.amazonaws.com"
  CodeStarConnectionsConnectionConnectiond52395b9b2274116a016fac6cbb45f7f:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::CodeStarConnections::Connection"
    DeletionPolicy: "Retain"
    Properties:
      ConnectionName: "medical-register-github"
      HostArn: "arn:aws:codestar-connections:us-west-2:000000000000:host/00000000-0000-0000-0000-000000000000"
      ProviderType: "GitHub"
      Tags: []
  WAFv2WebACLCLOUDFRONT:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::WAFv2::WebACL"
    DeletionPolicy: "Retain"
    Properties:
      Description: ""
      DefaultAction:
        Allow: {}
      Scope: "CLOUDFRONT"
      Rules:
      - OverrideAction:
          None: {}
        RuleLabels: []
        VisibilityConfig:
          SampledRequestsEnabled: true
          MetricName: "AWS-AWSManagedRulesAmazonIpReputationList"
          CloudWatchMetricsEnabled: true
        Priority: 0
        Statement:
          ManagedRuleGroupStatement:
            ManagedRuleGroupConfigs: []
            VendorName: "AWS"
            RuleActionOverrides: []
            ExcludedRules: []
            Name: "AWSManagedRulesAmazonIpReputationList"
        Name: "AWS-AWSManagedRulesAmazonIpReputationList"
      - OverrideAction:
          None: {}
        RuleLabels: []
        VisibilityConfig:
          SampledRequestsEnabled: true
          MetricName: "AWS-AWSManagedRulesCommonRuleSet"
          CloudWatchMetricsEnabled: true
        Priority: 1
        Statement:
          ManagedRuleGroupStatement:
            ManagedRuleGroupConfigs: []
            VendorName: "AWS"
            RuleActionOverrides: []
            ExcludedRules: []
            Name: "AWSManagedRulesCommonRuleSet"
        Name: "AWS-AWSManagedRulesCommonRuleSet"
      - OverrideAction:
          None: {}
        RuleLabels: []
        VisibilityConfig:
          SampledRequestsEnabled: true
          MetricName: "AWS-AWSManagedRulesKnownBadInputsRuleSet"
          CloudWatchMetricsEnabled: true
        Priority: 2
        Statement:
          ManagedRuleGroupStatement:
            ManagedRuleGroupConfigs: []
            VendorName: "AWS"
            RuleActionOverrides: []
            ExcludedRules: []
            Name: "AWSManagedRulesKnownBadInputsRuleSet"
        Name: "AWS-AWSManagedRulesKnownBadInputsRuleSet"
      VisibilityConfig:
        SampledRequestsEnabled: true
        MetricName: "CreatedByALB-51691baa-57a0-44fc-a849-c6d4dad2cc02"
        CloudWatchMetricsEnabled: true
      Name: "CreatedByALB-51691baa-57a0-44fc-a849-c6d4dad2cc02"
  EC2Subnet:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::Subnet"
    DeletionPolicy: "Retain"
    Properties:
      VpcId:
        Ref: "EC2VPC"
      MapPublicIpOnLaunch: false
      EnableDns64: false
      AvailabilityZoneId: "use1-az6"
      PrivateDnsNameOptionsOnLaunch:
        EnableResourceNameDnsARecord: false
        HostnameType: "ip-name"
        EnableResourceNameDnsAAAARecord: false
      CidrBlock: "10.0.16.0/20"
      Ipv6Native: false
      Tags:
      - Value: "subnet-public2-us-east-1b"
        Key: "Name"
  EC2SecurityGroup:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::SecurityGroup"
    DeletionPolicy: "Retain"
    Properties:
      GroupDescription: "Security group for medical-register ALB"
      GroupName: "medical-register-alb-sg"
      VpcId:
        Ref: "EC2VPC"
      SecurityGroupIngress:
      - CidrIp: "0.0.0.0/0"
        IpProtocol: "tcp"
        FromPort: 80
        ToPort: 80
      SecurityGroupEgress:
      - IpProtocol: "tcp"
        DestinationSecurityGroupId:
          Fn::GetAtt:
          - "EC2SecurityGroupAp"
          - "GroupId"
        FromPort: 8080
        ToPort: 8080
      Tags:
      - Value: "medical-register-alb-sg"
        Key: "Name"
  EC2SubnetXn:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::Subnet"
    DeletionPolicy: "Retain"
    Properties:
      VpcId:
        Ref: "EC2VPC"
      MapPublicIpOnLaunch: false
      EnableDns64: false
      AvailabilityZoneId: "use1-az4"
      PrivateDnsNameOptionsOnLaunch:
        EnableResourceNameDnsARecord: false
        HostnameType: "ip-name"
        EnableResourceNameDnsAAAARecord: false
      CidrBlock: "10.0.0.0/20"
      Ipv6Native: false
      Tags:
      - Value: "subnet-public1-us-east-1a"
        Key: "Name"
  ElasticLoadBalancingV2LoadBalancerLoadbalancerappmedicalregisteralb8f9ae4e712d84b88:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    DeletionPolicy: "Retain"
    Properties:
      IpAddressType: "ipv4"
      SecurityGroups:
      - "sg-07ca8743185a1af90"
      LoadBalancerAttributes:
      - Value: ""
        Key: "access_logs.s3.prefix"
      - Value: "append"
        Key: "routing.http.xff_header_processing.mode"
      - Value: "true"
        Key: "routing.http2.enabled"
      - Value: "false"
        Key: "waf.fail_open.enabled"
      - Value: ""
        Key: "connection_logs.s3.bucket"
      - Value: "false"
        Key: "access_logs.s3.enabled"
      - Value: "false"
        Key: "zonal_shift.config.enabled"
      - Value: "defensive"
        Key: "routing.http.desync_mitigation_mode"
      - Value: ""
        Key: "connection_logs.s3.prefix"
      - Value: "false"
        Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
      - Value: "false"
        Key: "routing.http.preserve_host_header.enabled"
      - Value: "true"
        Key: "load_balancing.cross_zone.enabled"
      - Value: "false"
        Key: "routing.http.xff_client_port.enabled"
      - Value: ""
        Key: "access_logs.s3.bucket"
      - Value: "false"
        Key: "deletion_protection.enabled"
      - Value: "3600"
        Key: "client_keep_alive.seconds"
      - Value: "false"
        Key: "routing.http.drop_invalid_header_fields.enabled"
      - Value: "false"
        Key: "connection_logs.s3.enabled"
      - Value: "60"
        Key: "idle_timeout.timeout_seconds"
      Subnets:
      - Ref: "EC2Subnet"
      - Ref: "EC2SubnetXn"
      Type: "application"
      Scheme: "internet-facing"
      EnablePrefixForIpv6SourceNat: "off"
      EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic: ""
      Tags: []
      Name: "medical-register-alb"
      SubnetMappings:
      - SubnetId:
          Ref: "EC2Subnet"
      - SubnetId:
          Ref: "EC2SubnetXn"
  IAMRoleAWSServiceRoleForECS:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::IAM::Role"
    DeletionPolicy: "Retain"
    Properties:
      Path: "/aws-service-role/ecs.amazonaws.com/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/aws-service-role/AmazonECSServiceRolePolicy"
      MaxSessionDuration: 3600
      RoleName: "AWSServiceRoleForECS"
      Description: "Policy to enable Amazon ECS to manage your EC2 instances and related\
        \ resources."
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "ecs.amazonaws.com"
  S3BucketCodepipelineuseast1568b3f797127455bb7342308f722c53e:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::S3::Bucket"
    DeletionPolicy: "Retain"
    Properties:
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        BlockPublicAcls: true
      BucketName: "codepipeline-us-east-1-568b3f797127-455b-b734-2308f722c53e"
      OwnershipControls:
        Rules:
        - ObjectOwnership: "BucketOwnerEnforced"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - BucketKeyEnabled: false
          ServerSideEncryptionByDefault:
            SSEAlgorithm: "AES256"
  LogsLogGroupawscodebuildmedicalregisterbuild:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::Logs::LogGroup"
    DeletionPolicy: "Retain"
    Properties:
      FieldIndexPolicies: []
      LogGroupClass: "STANDARD"
      LogGroupName: "/aws/codebuild/medical-register-build"
      DataProtectionPolicy: {}
  IAMRoleAWSCodePipelineServiceRoleuseast1medicalregisterpipeline:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::IAM::Role"
    DeletionPolicy: "Retain"
    Properties:
      Path: "/service-role/"
      ManagedPolicyArns:
      - "arn:aws:iam::851725251295:policy/service-role/CodePipeline-CodeConnections-us-east-1-medical-register-pipeline"
      - "arn:aws:iam::851725251295:policy/service-role/CodePipeline-CodeBuild-us-east-1-medical-register-pipeline"
      - "arn:aws:iam::851725251295:policy/service-role/AWSCodePipelineServiceRole-us-east-1-medical-register-pipeline"
      - "arn:aws:iam::aws:policy/AmazonECS_FullAccess"
      MaxSessionDuration: 3600
      RoleName: "AWSCodePipelineServiceRole-us-east-1-medical-register-pipeline"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Condition:
            StringEquals:
              aws:SourceAccount: "851725251295"
          Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "codepipeline.amazonaws.com"
          Sid: "CodePipelineTrustPolicy"
  EC2NetworkInterfaceAv:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::NetworkInterface"
    DeletionPolicy: "Retain"
    Properties:
      Description: "arn:aws:ecs:us-east-1:851725251295:attachment/ea45e8b9-d9f1-49e5-9f09-b540985da325"
      PrivateIpAddress: "10.0.22.98"
      PrivateIpAddresses:
      - PrivateIpAddress: "10.0.22.98"
        Primary: true
      SecondaryPrivateIpAddressCount: 0
      Ipv6PrefixCount: 0
      Ipv4Prefixes: []
      Ipv4PrefixCount: 0
      GroupSet:
      - "sg-0c0baeee45ba19958"
      Ipv6Prefixes: []
      SubnetId:
        Ref: "EC2Subnet"
      SourceDestCheck: true
      InterfaceType: "interface"
      Tags: []
      PublicIpDnsNameOptions:
        DnsHostnameType: "public-ipv4-dns-name"
        PublicIpv4DnsName: "ec2-54-196-36-77.compute-1.amazonaws.com"
  EC2SubnetUb:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::Subnet"
    DeletionPolicy: "Retain"
    Properties:
      VpcId:
        Ref: "EC2VPC"
      MapPublicIpOnLaunch: false
      EnableDns64: false
      AvailabilityZoneId: "use1-az6"
      PrivateDnsNameOptionsOnLaunch:
        EnableResourceNameDnsARecord: false
        HostnameType: "ip-name"
        EnableResourceNameDnsAAAARecord: false
      CidrBlock: "10.0.144.0/20"
      Ipv6Native: false
      Tags:
      - Value: "subnet-private2-us-east-1b"
        Key: "Name"
  IAMManagedPolicyPolicyserviceroleCodeBuildBasePolicymedicalregisterbuilduseast1:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::IAM::ManagedPolicy"
    DeletionPolicy: "Retain"
    Properties:
      ManagedPolicyName: "CodeBuildBasePolicy-medical-register-build-us-east-1"
      Path: "/service-role/"
      Description: "Policy used in trust relationship with CodeBuild"
      Groups: []
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource:
          - "arn:aws:logs:us-east-1:851725251295:log-group:/aws/codebuild/medical-register-build"
          - "arn:aws:logs:us-east-1:851725251295:log-group:/aws/codebuild/medical-register-build:*"
          Action:
          - "logs:CreateLogGroup"
          - "logs:CreateLogStream"
          - "logs:PutLogEvents"
          Effect: "Allow"
        - Resource:
          - "arn:aws:s3:::codepipeline-us-east-1-*"
          Action:
          - "s3:PutObject"
          - "s3:GetObject"
          - "s3:GetObjectVersion"
          - "s3:GetBucketAcl"
          - "s3:GetBucketLocation"
          Effect: "Allow"
        - Resource:
          - "arn:aws:codebuild:us-east-1:851725251295:report-group/medical-register-build-*"
          Action:
          - "codebuild:CreateReportGroup"
          - "codebuild:CreateReport"
          - "codebuild:UpdateReport"
          - "codebuild:BatchPutTestCases"
          - "codebuild:BatchPutCodeCoverages"
          Effect: "Allow"
        - Resource: "arn:aws:secretsmanager:us-east-1:851725251295:secret:dockerhub/medical-register/credentials-Mra96G"
          Action: "secretsmanager:GetSecretValue"
          Effect: "Allow"
      Roles:
      - Ref: "IAMRoleCodebuildmedicalregisterbuildservicerole"
      Users: []
  EC2NetworkInterfaceAttachmentLe:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::NetworkInterfaceAttachment"
    DeletionPolicy: "Retain"
    Properties:
      NetworkInterfaceId: "eni-00fda9395196d16f8"
      DeviceIndex: "1"
      DeleteOnTermination: false
  IAMManagedPolicyPolicyserviceroleAWSCodePipelineServiceRoleuseast1medicalregisterpipeline:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::IAM::ManagedPolicy"
    DeletionPolicy: "Retain"
    Properties:
      ManagedPolicyName: "AWSCodePipelineServiceRole-us-east-1-medical-register-pipeline"
      Path: "/service-role/"
      Description: "Policy used in trust relationship with CodePipeline for service\
        \ role"
      Groups: []
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Condition:
            StringEquals:
              aws:ResourceAccount: "851725251295"
          Resource:
          - "arn:aws:s3:::codepipeline-us-east-1-568b3f797127-455b-b734-2308f722c53e"
          Action:
          - "s3:GetBucketVersioning"
          - "s3:GetBucketAcl"
          - "s3:GetBucketLocation"
          Effect: "Allow"
          Sid: "AllowS3BucketAccess"
        - Condition:
            StringEquals:
              aws:ResourceAccount: "851725251295"
          Resource:
          - "arn:aws:s3:::codepipeline-us-east-1-568b3f797127-455b-b734-2308f722c53e/*"
          Action:
          - "s3:PutObject"
          - "s3:PutObjectAcl"
          - "s3:GetObject"
          - "s3:GetObjectVersion"
          Effect: "Allow"
          Sid: "AllowS3ObjectAccess"
      Roles:
      - Ref: "IAMRoleAWSCodePipelineServiceRoleuseast1medicalregisterpipeline"
      Users: []
  EC2NetworkInterfaceAttachmentPf:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::NetworkInterfaceAttachment"
    DeletionPolicy: "Retain"
    Properties:
      NetworkInterfaceId: "eni-0a1e833bd9d61818d"
      DeviceIndex: "1"
      DeleteOnTermination: false
  EC2SecurityGroupAp:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::SecurityGroup"
    DeletionPolicy: "Retain"
    Properties:
      GroupDescription: "Security group for medical-register ECS tasks"
      GroupName: "medical-register-task-sg"
      VpcId:
        Ref: "EC2VPC"
      SecurityGroupIngress:
      - IpProtocol: "tcp"
        Description: "Allow traffic from ALB on port 8080"
        FromPort: 8080
        SourceSecurityGroupId: "sg-07ca8743185a1af90"
        ToPort: 8080
        SourceSecurityGroupOwnerId: "851725251295"
      SecurityGroupEgress:
      - CidrIp: "0.0.0.0/0"
        IpProtocol: "-1"
        FromPort: -1
        ToPort: -1
      Tags:
      - Value: "medical-register-task-sg"
        Key: "Name"
  EC2SubnetHj:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::Subnet"
    DeletionPolicy: "Retain"
    Properties:
      VpcId:
        Ref: "EC2VPC"
      MapPublicIpOnLaunch: false
      EnableDns64: false
      AvailabilityZoneId: "use1-az4"
      PrivateDnsNameOptionsOnLaunch:
        EnableResourceNameDnsARecord: false
        HostnameType: "ip-name"
        EnableResourceNameDnsAAAARecord: false
      CidrBlock: "10.0.128.0/20"
      Ipv6Native: false
      Tags:
      - Value: "subnet-private1-us-east-1a"
        Key: "Name"
  EC2NatGatewayVU:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::NatGateway"
    DeletionPolicy: "Retain"
    Properties:
      PrivateIpAddress: "10.0.23.111"
      ConnectivityType: "public"
      VpcId: "vpc-0e6b27f3af141f0e1"
      EniId: "eni-027f93c72d460d1f7"
      AllocationId:
        Fn::GetAtt:
        - "EC2EIP1002980173"
        - "AllocationId"
      SubnetId:
        Ref: "EC2Subnet"
      Tags:
      - Value: "nat-public2-us-east-1b"
        Key: "Name"
  CloudFrontDistribution:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::CloudFront::Distribution"
    DeletionPolicy: "Retain"
    Properties:
      DistributionConfig:
        Logging:
          IncludeCookies: false
          Bucket: ""
          Prefix: ""
        Comment: "Default 1-click CloudFront distribution"
        DefaultRootObject: ""
        Origins:
        - ConnectionTimeout: 10
          OriginAccessControlId: ""
          ConnectionAttempts: 3
          OriginCustomHeaders: []
          DomainName:
            Fn::GetAtt:
            - "ElasticLoadBalancingV2LoadBalancerLoadbalancerappmedicalregisteralb8f9ae4e712d84b88"
            - "DNSName"
          OriginShield:
            Enabled: false
          OriginPath: ""
          Id: "medical-register-alb-2037349304.us-east-1.elb.amazonaws.com"
          CustomOriginConfig:
            OriginKeepaliveTimeout: 5
            OriginReadTimeout: 30
            OriginSSLProtocols:
            - "TLSv1.2"
            HTTPSPort: 443
            HTTPPort: 80
            OriginProtocolPolicy: "http-only"
        ViewerCertificate:
          MinimumProtocolVersion: "TLSv1"
          SslSupportMethod: "vip"
          CloudFrontDefaultCertificate: true
        PriceClass: "PriceClass_All"
        DefaultCacheBehavior:
          Compress: false
          FunctionAssociations: []
          LambdaFunctionAssociations: []
          TargetOriginId: "medical-register-alb-2037349304.us-east-1.elb.amazonaws.com"
          ViewerProtocolPolicy: "redirect-to-https"
          GrpcConfig:
            Enabled: false
          TrustedSigners: []
          FieldLevelEncryptionId: ""
          TrustedKeyGroups: []
          AllowedMethods:
          - "HEAD"
          - "DELETE"
          - "POST"
          - "GET"
          - "OPTIONS"
          - "PUT"
          - "PATCH"
          CachedMethods:
          - "HEAD"
          - "GET"
          SmoothStreaming: false
          CachePolicyId:
            Ref: "CloudFrontCachePolicy"
        Staging: false
        CustomErrorResponses: []
        ContinuousDeploymentPolicyId: ""
        OriginGroups:
          Quantity: 0
          Items: []
        Enabled: true
        Aliases: []
        IPV6Enabled: true
        WebACLId:
          Fn::GetAtt:
          - "WAFv2WebACLCLOUDFRONT"
          - "Arn"
        HttpVersion: "http2"
        Restrictions:
          GeoRestriction:
            Locations: []
            RestrictionType: "none"
        CacheBehaviors: []
  EC2NetworkInterfaceEG:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::NetworkInterface"
    DeletionPolicy: "Retain"
    Properties:
      Description: "arn:aws:ecs:us-east-1:851725251295:attachment/cffe05b0-e311-4a9a-9298-2cd1f6752037"
      PrivateIpAddress: "10.0.130.81"
      PrivateIpAddresses:
      - PrivateIpAddress: "10.0.130.81"
        Primary: true
      SecondaryPrivateIpAddressCount: 0
      Ipv6PrefixCount: 0
      Ipv4Prefixes: []
      Ipv4PrefixCount: 0
      GroupSet:
      - "sg-0c0baeee45ba19958"
      Ipv6Prefixes: []
      SubnetId:
        Ref: "EC2SubnetHj"
      SourceDestCheck: true
      InterfaceType: "interface"
      Tags: []
      PublicIpDnsNameOptions:
        DnsHostnameType: "public-ipv4-dns-name"
        PublicIpv4DnsName: "ec2-44-220-157-230.compute-1.amazonaws.com"
  EC2NetworkInterfaceDf:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::NetworkInterface"
    DeletionPolicy: "Retain"
    Properties:
      Description: "Interface for NAT Gateway nat-09518357662948870"
      PrivateIpAddress: "10.0.23.111"
      PrivateIpAddresses:
      - PrivateIpAddress: "10.0.23.111"
        Primary: true
      SecondaryPrivateIpAddressCount: 0
      Ipv6PrefixCount: 0
      Ipv4Prefixes: []
      Ipv4PrefixCount: 0
      GroupSet: []
      Ipv6Prefixes: []
      SubnetId:
        Ref: "EC2Subnet"
      SourceDestCheck: false
      InterfaceType: "null"
      Tags: []
      PublicIpDnsNameOptions:
        DnsHostnameType: "public-ipv4-dns-name"
        PublicIpv4DnsName: "ec2-100-29-80-173.compute-1.amazonaws.com"
  EC2RouteTableNc:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::RouteTable"
    DeletionPolicy: "Retain"
    Properties:
      VpcId:
        Ref: "EC2VPC"
      Tags:
      - Value: "rtb-private2-us-east-1b"
        Key: "Name"
  ECRRepositoryMedicalregister:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::ECR::Repository"
    DeletionPolicy: "Retain"
    Properties:
      ImageScanningConfiguration:
        ScanOnPush: false
      RepositoryName: "medical-register"
      EncryptionConfiguration:
        EncryptionType: "AES256"
      Tags: []
      ImageTagMutability: "MUTABLE"
  EC2RouteTableBK:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::RouteTable"
    DeletionPolicy: "Retain"
    Properties:
      VpcId:
        Ref: "EC2VPC"
      Tags:
      - Value: "rtb-public"
        Key: "Name"
  LogsLogGroupecsmedicalregisterapp:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::Logs::LogGroup"
    DeletionPolicy: "Retain"
    Properties:
      FieldIndexPolicies: []
      LogGroupClass: "STANDARD"
      LogGroupName: "/ecs/medical-register-app"
      DataProtectionPolicy: {}
  ECSClusterCapacityProviderAssociationsMedicalregistercluster:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::ECS::ClusterCapacityProviderAssociations"
    DeletionPolicy: "Retain"
    Properties:
      CapacityProviders:
      - "FARGATE"
      - "FARGATE_SPOT"
      Cluster: "medical-register-cluster"
      DefaultCapacityProviderStrategy: []
  EC2VPC:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::VPC"
    DeletionPolicy: "Retain"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      InstanceTenancy: "default"
      EnableDnsHostnames: true
      Tags:
      - Value: "medical-register-vpc"
        Key: "Name"
  EC2RouteOe:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::Route"
    DeletionPolicy: "Retain"
    Properties:
      NatGatewayId:
        Ref: "EC2NatGateway"
      RouteTableId:
        Ref: "EC2RouteTableSY"
      DestinationCidrBlock: "0.0.0.0/0"
  EC2RouteTableSY:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::RouteTable"
    DeletionPolicy: "Retain"
    Properties:
      VpcId:
        Ref: "EC2VPC"
      Tags:
      - Value: "rtb-private1-us-east-1a"
        Key: "Name"
  EC2RouteTable:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::RouteTable"
    DeletionPolicy: "Retain"
    Properties:
      VpcId:
        Ref: "EC2VPC"
  EC2SubnetNetworkAclAssociationSL:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    DeletionPolicy: "Retain"
    Properties:
      NetworkAclId:
        Ref: "EC2NetworkAcl"
      SubnetId:
        Ref: "EC2SubnetUb"
  EC2NetworkInterfaceEW:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::NetworkInterface"
    DeletionPolicy: "Retain"
    Properties:
      Description: "Interface for NAT Gateway nat-023e086eefc7286c6"
      PrivateIpAddress: "10.0.0.186"
      PrivateIpAddresses:
      - PrivateIpAddress: "10.0.0.186"
        Primary: true
      SecondaryPrivateIpAddressCount: 0
      Ipv6PrefixCount: 0
      Ipv4Prefixes: []
      Ipv4PrefixCount: 0
      GroupSet: []
      Ipv6Prefixes: []
      SubnetId:
        Ref: "EC2SubnetXn"
      SourceDestCheck: false
      InterfaceType: "null"
      Tags: []
      PublicIpDnsNameOptions:
        DnsHostnameType: "public-ipv4-dns-name"
        PublicIpv4DnsName: "ec2-52-6-121-149.compute-1.amazonaws.com"
  EC2RouteKZ:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::EC2::Route"
    DeletionPolicy: "Retain"
    Properties:
      RouteTableId:
        Ref: "EC2RouteTableNc"
      DestinationPrefixListId: "pl-63a5400a"
      GatewayId: "vpce-04de2e936c5bfd7ed"
      VpcEndpointId: "vpce-04de2e936c5bfd7ed"
